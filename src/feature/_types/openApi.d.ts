/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/share': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 랜덤 url 생성 */
    post: operations['createUrl'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/share/{url}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 랜덤 url로 접근 했을 때 share_id를 반환/ 사용할 수 없으면 null 반환 */
    get: operations['findShareId'];
    put?: never;
    /** 투표에 추가 기능 */
    post: operations['addVoteStore'];
    /** 투표에서 삭제 기능 */
    delete: operations['deleteVoteStore'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/share/{url}/vote': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 투표 좋아요 */
    post: operations['like'];
    delete?: never;
    options?: never;
    head?: never;
    /** 투표 좋아요 취소 */
    patch: operations['likeCancel'];
    trace?: never;
  };
  '/rooms': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['createLiveRoom'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/rooms/{room_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getLiveRoomDetails'];
    put?: never;
    post: operations['enterLiveRoom'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/rooms/{room_id}/exit': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['exitLiveRoom'];
    delete: operations['endLiveRoom'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/rooms/{room_id}/capture': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['captureLiveRoom'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/posts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 포스트 조회 (사용자) */
    get: operations['getAllPostsByUser'];
    put?: never;
    /** 포스트 생성 */
    post: operations['createPost'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/posts/auto': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** AI 자동 생성 */
    post: operations['createContent'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/members/{fromMemberId}/follow': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 회원 팔로우 추가 */
    post: operations['createFollow'];
    /** 회원 팔로우 삭제 */
    delete: operations['deleteFollow'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 로그인 */
    post: operations['login'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/join': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 회원 가입 */
    post: operations['join'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/sessions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['initializeSession'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/sessions/{sessionId}/connections': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getConnections'];
    put?: never;
    post: operations['createConnection'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/sessions/{sessionId}/connections/voice': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['createConnectionVoice'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/sessions/voice': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['initializeSessionVoice'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/posts/{postId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 포스트 조회 (상세) */
    get: operations['getPostById'];
    put?: never;
    post?: never;
    /** 포스트 삭제 */
    delete: operations['deletePost'];
    options?: never;
    head?: never;
    /** 포스트 수정 */
    patch: operations['updatePost'];
    trace?: never;
  };
  '/members/password': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** 회원 비밀번호 수정 */
    patch: operations['updatePassword'];
    trace?: never;
  };
  '/members/image': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** 회원 프로필 사진 수정 */
    patch: operations['updateMemberImage'];
    trace?: never;
  };
  '/stores': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 식당 검색 (전체) */
    get: operations['searchStores'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/stores/member': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 식당 검색 (사용자) */
    get: operations['searchPostsByMemberIdAndStore'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/store/{store_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** ID로 식당 검색 (단일) */
    get: operations['searchStoreById'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/share/{url}/vote/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 투표 리스트 조회 */
    get: operations['showVoteList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/share/{url}/result': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 투표 결과 보기 */
    get: operations['showResult'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/share/{share_id}/map': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** share_id를 통해 들어왔을 때 표시되는 지도 */
    get: operations['findStores'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/session': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 세션 만료 확인 */
    get: operations['session'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/rooms/map': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getStoreLiveRooms'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/rooms/followings': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getFollowedLiveRooms'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/posts/{postId}/check': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 포스트 수정 가능 여부 확인 */
    get: operations['checkUpdatePost'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/posts/all': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 포스트 조회 (전체) */
    get: operations['getAllPosts'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/members': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 사용자 검색 */
    get: operations['searchMembers'];
    put?: never;
    post?: never;
    /** 회원 탈퇴 */
    delete: operations['deleteMember'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/members/{memberId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 프로필 조회 */
    get: operations['getMemberInfo'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/member/{username}/profile': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 프로필 이미지, 프로필 이름(username) 반환 */
    get: operations['getMemberProfile'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/map': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 좌표에 맞는 식당 좌표 조회 */
    get: operations['findStores_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/map/posts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 식당 아이디로 포스트 조회 */
    get: operations['getPostsByStore'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/map/live': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 식당 아이디로 라이브 리스트 조회 */
    get: operations['getLiveByStore'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 로그아웃 */
    get: operations['logout'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/join/username': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 아이디 중복 확인 */
    get: operations['checkUsername'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/followings': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 팔로잉 목록 조회 */
    get: operations['getFollowings'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/followers': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 팔로워 목록 조회 */
    get: operations['getFollowers'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stores': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getStore'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/sessions/{sessionId}/creator': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getSessionCreator'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/sessions/find/{sessionId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['findSession'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/sessions/{sessionId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations['closeSession'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/sessions/{sessionId}/member/{memberId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations['closeConnection'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    ErrorResponse: {
      /** Format: date-time */
      timeStamp?: string;
      /** Format: int32 */
      status?: number;
      error?: string;
      message?: string;
    };
    CreateLiveRoomRequest: {
      title?: string;
      storeName?: string;
    };
    Follow: {
      /** Format: int64 */
      id?: number;
      toMember?: components['schemas']['Member'];
      fromMember?: components['schemas']['Member'];
      /** Format: date-time */
      createDate?: string;
      each?: boolean;
    };
    LiveRoom: {
      /** Format: int64 */
      id?: number;
      store?: components['schemas']['Store'];
      member?: components['schemas']['Member'];
      sessionId?: string;
      liveRoomParticipants?: components['schemas']['LiveRoomParticipant'][];
    };
    LiveRoomParticipant: {
      /** Format: int64 */
      id?: number;
      sessionId?: string;
      member?: components['schemas']['Member'];
      liveRoom?: components['schemas']['LiveRoom'];
    };
    Location: {
      address?: string;
      /** Format: double */
      posx?: number;
      /** Format: double */
      posy?: number;
    };
    Member: {
      /** Format: int64 */
      id?: number;
      username?: string;
      password?: string;
      name?: string;
      phoneNumber?: string;
      memberImage?: components['schemas']['MemberImage'];
      followers?: components['schemas']['Follow'][];
      followings?: components['schemas']['Follow'][];
      posts?: components['schemas']['Post'][];
      liveRoom?: components['schemas']['LiveRoom'];
      live?: boolean;
    };
    MemberImage: {
      /** Format: int64 */
      id?: number;
      url?: string;
    };
    Menu: {
      /** Format: int64 */
      id?: number;
      menuName?: string;
      /** Format: int32 */
      menuPrice?: number;
      menuImage: components['schemas']['MenuImage'];
      menuContent?: string;
      store?: components['schemas']['Store'];
      post?: components['schemas']['Post'];
    };
    MenuImage: {
      /** Format: int64 */
      id?: number;
      url?: string;
    };
    Post: {
      /** Format: int64 */
      id?: number;
      postMainMenu?: string;
      member?: components['schemas']['Member'];
      /** Format: date-time */
      createDate?: string;
      /** Format: date-time */
      updateDate?: string;
      store?: components['schemas']['Store'];
      menus?: components['schemas']['Menu'][];
      /** @enum {string} */
      category?:
        | 'KOREAN'
        | 'CHINESE'
        | 'JAPANESE'
        | 'WESTERN'
        | 'DESSERT'
        | 'CAFE';
      /** @enum {string} */
      permission?: 'PRIVATE' | 'PUBLIC' | 'FRIENDS';
      auto?: boolean;
    };
    Store: {
      /** Format: int64 */
      id?: number;
      storeName?: string;
      storeLocation?: components['schemas']['Location'];
      posts?: components['schemas']['Post'][];
      menus?: components['schemas']['Menu'][];
      liveRooms?: components['schemas']['LiveRoom'][];
    };
    MenuCreateRequest: {
      menuName: string;
      /** Format: int32 */
      menuPrice: number;
      menuContent?: string;
    };
    PostCreateRequest: {
      storeName: string;
      storeLocation: components['schemas']['Location'];
      /** @enum {string} */
      postCategory:
        | 'KOREAN'
        | 'CHINESE'
        | 'JAPANESE'
        | 'WESTERN'
        | 'DESSERT'
        | 'CAFE';
      postMainMenu: string;
      /** @enum {string} */
      permission: 'PRIVATE' | 'PUBLIC' | 'FRIENDS';
      menus: components['schemas']['MenuCreateRequest'][];
      auto?: boolean;
    };
    MenuResponse: {
      /** Format: int64 */
      menuId?: number;
      menuImage?: components['schemas']['MenuImage'];
      menuName?: string;
      /** Format: int32 */
      menuPrice?: number;
      menuContent?: string;
    };
    PostResponse: {
      /** Format: int64 */
      postId?: number;
      memberUsername?: string;
      storeName?: string;
      storeLocation?: components['schemas']['Location'];
      postMainMenu?: string;
      /** @enum {string} */
      postCategory?:
        | 'KOREAN'
        | 'CHINESE'
        | 'JAPANESE'
        | 'WESTERN'
        | 'DESSERT'
        | 'CAFE';
      /** @enum {string} */
      permission?: 'PRIVATE' | 'PUBLIC' | 'FRIENDS';
      /** Format: date-time */
      createdDate?: string;
      /** Format: date-time */
      updatedDate?: string;
      menus?: components['schemas']['MenuResponse'][];
      auto?: boolean;
    };
    PostAIRequest: {
      /** @enum {string} */
      postCategory?:
        | 'KOREAN'
        | 'CHINESE'
        | 'JAPANESE'
        | 'WESTERN'
        | 'DESSERT'
        | 'CAFE';
      menuName?: string;
    };
    PostAIResponse: {
      menuContent?: string;
    };
    LoginRequest: {
      username?: string;
      password?: string;
    };
    MemberResponse: {
      memberUsername?: string;
      memberImage?: components['schemas']['MemberImage'];
    };
    MemberRequest: {
      username: string;
      password: string;
      passwordConfirm: string;
      name: string;
      phoneNumber: string;
    };
    MenuUpdateRequest: {
      /** Format: int64 */
      menuId: number;
      menuName: string;
      /** Format: int32 */
      menuPrice: number;
      menuContent: string;
    };
    PostUpdateRequest: {
      storeName: string;
      storeLocation: components['schemas']['Location'];
      /** @enum {string} */
      postCategory:
        | 'KOREAN'
        | 'CHINESE'
        | 'JAPANESE'
        | 'WESTERN'
        | 'DESSERT'
        | 'CAFE';
      postMainMenu: string;
      /** @enum {string} */
      permission: 'PRIVATE' | 'PUBLIC' | 'FRIENDS';
      menus: components['schemas']['MenuUpdateRequest'][];
      auto?: boolean;
    };
    StoreSearchResponse: {
      /** Format: int64 */
      storeId?: number;
      storeName?: string;
      menuImage?: components['schemas']['MenuImage'];
      /** Format: int32 */
      postCount?: number;
      menuName?: string;
    };
    StoreResponse: {
      storeName?: string;
      storeAddress?: string;
      /** Format: int64 */
      storeId?: number;
      /** Format: double */
      posx?: number;
      /** Format: double */
      posy?: number;
      liveStore?: boolean;
    };
    LiveResponse: {
      profileImage?: string;
      sessionId?: string;
      userName?: string;
      address?: string;
      storeName?: string;
    };
    StorePostResponse: {
      /** Format: int64 */
      postId?: number;
      memberUsername?: string;
      storeName?: string;
      postMainMenu?: string;
      menuImage?: components['schemas']['MenuImage'];
      /** Format: int32 */
      menuPrice?: number;
      /** Format: date-time */
      createdDate?: string;
      /** Format: date-time */
      updatedDate?: string;
      /** @enum {string} */
      category?:
        | 'KOREAN'
        | 'CHINESE'
        | 'JAPANESE'
        | 'WESTERN'
        | 'DESSERT'
        | 'CAFE';
    };
    PostUpdateCheckResponse: {
      update?: boolean;
    };
    MemberSearchResponse: {
      /** Format: int64 */
      memberId?: number;
      memberUsername?: string;
      memberImage?: components['schemas']['MemberImage'];
      to?: boolean;
      from?: boolean;
      each?: boolean;
    };
    MemberInfoResponse: {
      /** Format: int32 */
      followerNum?: number;
      /** Format: int32 */
      followingNum?: number;
      /** Format: int32 */
      postNum?: number;
      userName?: string;
      profileImage?: string;
    };
    MemberProfileResponse: {
      /** Format: int64 */
      memberId?: number;
      imageUrl?: string;
      username?: string;
      name?: string;
    };
    FollowingResponse: {
      /** Format: int64 */
      memberId?: number;
      username?: string;
      memberImageUrl?: string;
      live?: boolean;
      each?: boolean;
    };
    FollowerResponse: {
      /** Format: int64 */
      memberId?: number;
      username?: string;
      memberImageUrl?: string;
      each?: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  createUrl: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  findShareId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        url: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  addVoteStore: {
    parameters: {
      query: {
        store_id: string;
      };
      header?: never;
      path: {
        url: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  deleteVoteStore: {
    parameters: {
      query: {
        store_id: string;
      };
      header?: never;
      path: {
        url: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  like: {
    parameters: {
      query: {
        store_id: string;
      };
      header?: never;
      path: {
        url: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  likeCancel: {
    parameters: {
      query: {
        store_id: string;
      };
      header?: never;
      path: {
        url: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  createLiveRoom: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateLiveRoomRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['LiveRoom'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  getLiveRoomDetails: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        room_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['LiveRoom'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  enterLiveRoom: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        room_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  exitLiveRoom: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        room_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  endLiveRoom: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        room_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  captureLiveRoom: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        room_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  getAllPostsByUser: {
    parameters: {
      query?: {
        page?: number;
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['StorePostResponse'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  createPost: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          images: string[];
          data: components['schemas']['PostCreateRequest'];
        };
        'application/json': {
          images: string[];
          data: components['schemas']['PostCreateRequest'];
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PostResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  createContent: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PostAIRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PostAIResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  createFollow: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        fromMemberId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  deleteFollow: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        fromMemberId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['MemberResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  join: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['MemberRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  initializeSession: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': {
            [key: string]: Record<string, never>;
          };
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  getConnections: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        sessionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  createConnection: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        sessionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': {
            [key: string]: Record<string, never>;
          };
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  createConnectionVoice: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        sessionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': {
            [key: string]: Record<string, never>;
          };
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  initializeSessionVoice: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': {
            [key: string]: Record<string, never>;
          };
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  getPostById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        postId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PostResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  deletePost: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        postId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  updatePost: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        postId: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          images: string[];
          data: components['schemas']['PostUpdateRequest'];
        };
        'application/json': {
          images: string[];
          data: components['schemas']['PostUpdateRequest'];
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PostResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  updatePassword: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  updateMemberImage: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          image: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['MemberResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  searchStores: {
    parameters: {
      query: {
        keyword: string;
        page: number;
        size: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['StoreSearchResponse'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  searchPostsByMemberIdAndStore: {
    parameters: {
      query: {
        keyword: string;
        page: number;
        size: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PostResponse'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  searchStoreById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        store_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['StoreSearchResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  showVoteList: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        url: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['StoreSearchResponse'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  showResult: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        url: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['StoreSearchResponse'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  findStores: {
    parameters: {
      query: {
        left: string;
        right: string;
        up: string;
        down: string;
      };
      header?: never;
      path: {
        share_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['StoreResponse'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  session: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  getStoreLiveRooms: {
    parameters: {
      query: {
        storeName: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['LiveRoom'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  getFollowedLiveRooms: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['LiveResponse'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  checkUpdatePost: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        postId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PostUpdateCheckResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  getAllPosts: {
    parameters: {
      query?: {
        page?: number;
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['StorePostResponse'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  searchMembers: {
    parameters: {
      query: {
        username: string;
        page: number;
        size: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['MemberSearchResponse'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  deleteMember: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  getMemberInfo: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['MemberInfoResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  getMemberProfile: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        username: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['MemberProfileResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  findStores_1: {
    parameters: {
      query: {
        left: string;
        right: string;
        up: string;
        down: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['StoreResponse'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  getPostsByStore: {
    parameters: {
      query: {
        storeId: number;
        page: number;
        size: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['StorePostResponse'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  getLiveByStore: {
    parameters: {
      query: {
        storeId: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['LiveResponse'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  logout: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  checkUsername: {
    parameters: {
      query: {
        username: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': boolean;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  getFollowings: {
    parameters: {
      query?: {
        page?: number;
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['FollowingResponse'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  getFollowers: {
    parameters: {
      query?: {
        page?: number;
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['FollowerResponse'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  getStore: {
    parameters: {
      query: {
        location: components['schemas']['Location'];
        storeName: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': {
            [key: string]: Record<string, never>;
          };
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  getSessionCreator: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        sessionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': {
            [key: string]: Record<string, never>;
          };
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  findSession: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        sessionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': boolean;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  closeSession: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        sessionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  closeConnection: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        sessionId: string;
        memberId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
}
